//正则表达式学习
/** 
 * js正则表达式形式
 *   /[0-9][a-z]/gi
 * 两个‘/’内部是正则表达式
 * 两个‘/’外部是正则表达式修饰符
*/

//元字符
//[] 匹配括号内的任意字符
// [^123] 匹配非123
// * 匹配 0次或多次
// + 至少匹配一次
// ？ 零次或一次
// {n,m} 匹配前面的字符 至少n次但不超过m次
// (asd) 按照括号内

/**转义字符
 * 
 *  \cx	匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
 *  \f	匹配一个换页符。等价于 \x0c 和 \cL。
 *  \n	匹配一个换行符。等价于 \x0a 和 \cJ。
 *  \r	匹配一个回车符。等价于 \x0d 和 \cM。
 *  \s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
 *  \S	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
 *  \t	匹配一个制表符。等价于 \x09 和 \cI。
 *  \v	匹配一个垂直制表符。等价于 \x0b 和 \cK。
 *  \.  .
 */

//定位符有两种类型: 第一种类型是 `^` 检查匹配字符是否是起始字符，第二种类型是 `$`，它检查匹配字符是否是输入字符串的最后一个字符。

//简写字符集
/**
 * .  匹配除换行符外的任意字符
 * \w 匹配所有字母和数字
 * \W 匹配所有非字母和数字
 * \d 匹配数字
 * \D匹配非数字
 * \s 匹配空格符
 * \S 匹配非空格符
 */


//正则表达式修饰符
/*
 *  i 不区分大小写
 *  g 全文匹配
 *  m 多行匹配
 *  s 
*/